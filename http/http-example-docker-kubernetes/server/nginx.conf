# A simple configuration for Nginx as a reverse proxy

# Set the user to run as. 'nginx' is created in the Dockerfile.
user nginx;
# Set number of worker processes automatically based on CPU cores.
worker_processes auto;

# Define where Nginx logs and process ID file will be stored.
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Define the log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    keepalive_timeout  65;

    # Define an "upstream" for our Gunicorn application
    upstream flask_app {
        # Gunicorn will be running on localhost port 5000 inside this container
        server 127.0.0.1:5000;

    }

    # The main server block that handles incoming requests
    server {
        listen 80;

        location / {
            # Pass requests to the Gunicorn upstream
            proxy_pass http://flask_app;

            # Set headers to pass necessary info to the application
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}

