# docker-compose.yml
services:
  # CoAP Device
  coap-device:
    build: 
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "5683:5683/udp"
      - "5684:5684/udp"  # Secure CoAP
    environment:
      - DEVICE_ID=smart-thermostat-01
    volumes:
      - ./certs:/app/certs
    networks:
      - thermostat-net
    restart: unless-stopped

  # AI Controller
  ai-controller:
    build:
      context: .
      dockerfile: server/Dockerfile
    environment:
      # Email Configuration
      - SMTP_SERVER=${SMTP_SERVER:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - ALERT_EMAIL=${ALERT_EMAIL}
      
      # Webhook Configuration
      - WEBHOOK_URLS=${WEBHOOK_URLS:-}
      
      # FCM Configuration
      - FCM_PROJECT_ID=${FCM_PROJECT_ID}
      - FCM_PRIVATE_KEY_ID=${FCM_PRIVATE_KEY_ID}
      - FCM_PRIVATE_KEY=${FCM_PRIVATE_KEY}
      - FCM_CLIENT_EMAIL=${FCM_CLIENT_EMAIL}
      - FCM_CLIENT_ID=${FCM_CLIENT_ID}
      - FCM_SERVICE_ACCOUNT_PATH=${FCM_SERVICE_ACCOUNT_PATH:-}
      - FCM_SERVER_PORT=${FCM_SERVER_PORT:-5001}
    ports:
      - "8092:8092"
      - "8000:8000"
    depends_on:
      - coap-device
      - influxdb
      - redis
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - thermostat-net
    restart: unless-stopped

  # # Real-time Dashboard
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    ports:
      - "5005:5000"
    depends_on:
      - ai-controller
    environment:
      - FLASK_ENV=production
    networks:
      - thermostat-net
    restart: unless-stopped

  # # Mobile API
  mobile-api:
    build:
      context: .
      dockerfile: mobile/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - ai-controller
      - postgres
    environment:
      - DATABASE_URL=postgresql://thermostat:password@postgres:5432/thermostat
      - JWT_SECRET=your-secret-key
      - AI_CONTROLLER_API_URL=http://ai-controller:8000

    networks:
      - thermostat-net
    restart: unless-stopped

  # # Time Series Database
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=adminpassword123
      - DOCKER_INFLUXDB_INIT_ORG=coap-data-org
      - DOCKER_INFLUXDB_INIT_BUCKET=coap-data-bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=coap-token-1234567890
  
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - thermostat-net
    restart: unless-stopped

  # # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    #command: redis-server --requirepass redispassword123
    networks:
      - thermostat-net
    restart: unless-stopped

  # # PostgreSQL for User Data
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=thermostat
      - POSTGRES_USER=thermostat
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - thermostat-net
    restart: unless-stopped

  # Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - dashboard
      - mobile-api
    networks:
      - thermostat-net
    restart: unless-stopped

  redisinsight:
    image: redislabs/redisinsight:1.14.0
    ports:
      - "8003:8001"
    volumes:
      - redisinsight_data:/db
    environment:
      - RIPORT=8001
      - RIHOST=0.0.0.0
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - thermostat-net
  # # Monitoring
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - thermostat-net
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true # Optional: Allow anonymous access to dashboards
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer # Optional: Role for anonymous users
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards:ro # Mount dashboards JSONs
    depends_on:
      - prometheus
      - influxdb
    networks:
      - thermostat-net
    restart: unless-stopped

  client_fcm:
    build: 
      context: ./client_fcm
      dockerfile: Dockerfile
    volumes:
      - ./client:/usr/share/nginx/html
    environment:
      - FCM_API_KEY=${FCM_API_KEY}
      - FCM_PROJECT_ID=${FCM_PROJECT_ID}
      - FCM_AUTH_DOMAIN=${FCM_AUTH_DOMAIN}
      - FCM_STORAGE_BUCKET=${FCM_STORAGE_BUCKET}
      - FCM_SENDER_ID=${FCM_SENDER_ID}
      - FCM_APP_ID=${FCM_APP_ID}
      - FCM_VAPID_KEY=${FCM_VAPID_KEY}
      - BACKEND_URL=http://localhost:8000
    ports:
      - "3011:3000"
    networks:
      - thermostat-net
networks:
  thermostat-net:
    driver: bridge

volumes:
  influxdb_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  redisinsight_data: