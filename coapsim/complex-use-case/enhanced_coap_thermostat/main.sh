#!/bin/bash

# Define the path to your docker-compose file
DOCKER_COMPOSE_FILE="docker-compose.yml"

# Function to check for Docker and Docker Compose availability
check_dependencies() {
  echo "Checking for Docker and Docker Compose..."
  if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in your PATH. Please install Docker."
    exit 1
  fi
  if ! command -v docker-compose &> /dev/null; then
    echo "Error: Docker Compose is not installed or not in your PATH. Please install Docker Compose."
    exit 1
  fi
  echo "Docker and Docker Compose are available."
}

# Function to start services
start_services() {
  echo "Starting Docker Compose services..."
  docker-compose -f "$DOCKER_COMPOSE_FILE" up -d
  if [ $? -eq 0 ]; then
    echo "Docker Compose services started successfully."
  else
    echo "Error: Failed to start Docker Compose services."
    exit 1
  fi
}

# Function to stop services
stop_services() {
  echo "Stopping Docker Compose services..."
  # This command only stops and removes containers and networks, not volumes or images.
  docker-compose -f "$DOCKER_COMPOSE_FILE" down
  if [ $? -eq 0 ]; then
    echo "Docker Compose services stopped successfully."
  else
    echo "Error: Failed to stop Docker Compose services."
    exit 1
  fi
}

# Function to clean all project-specific resources (containers, networks, volumes, images)
clean_project_resources() {
  read -p "This will stop all services for this project and remove their containers, networks, volumes, and images generated by this docker-compose file. Are you sure? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Cleaning all project-specific Docker resources..."
    # --volumes: Removes named volumes declared in the `volumes` section of the compose file
    #            and anonymous volumes attached to containers.
    # --rmi all: Removes images used by any service, even if they aren't tagged.
    docker-compose -f "$DOCKER_COMPOSE_FILE" down --volumes --rmi all
    if [ $? -eq 0 ]; then
      echo "Project-specific Docker resources cleaned successfully."
    else
      echo "Error: Failed to clean project-specific Docker resources."
      exit 1
    fi
  else
    echo "Skipping project resource cleaning."
  fi
}

# Function to watch Docker Compose logs
watch_logs() {
  echo "Watching Docker Compose logs (Press Ctrl+C to stop)..."
  docker-compose -f "$DOCKER_COMPOSE_FILE" logs -f
}

# Main script logic
check_dependencies # Call the dependency check function first

case "$1" in
  start)
    start_services
    ;;
  stop)
    stop_services
    ;;
  restart)
    stop_services
    start_services
    ;;
  clean)
    clean_project_resources # Only call cleaning here
    ;;
  watch)
    watch_logs
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|clean|watch}"
    exit 1
    ;;
esac

exit 0