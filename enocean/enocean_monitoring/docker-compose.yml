services:
  # MQTT Broker - EMQX with Dashboard
  emqx:
    image: emqx/emqx:5.3.2
    container_name: enocean-emqx
    ports:
      - "11883:1883"     # MQTT TCP
      - "8083:8083"     # MQTT WebSocket
      - "8084:8084"     # MQTT SSL
      - "8883:8883"     # MQTT SSL/TLS
      - "18083:18083"   # Dashboard
    environment:
      - EMQX_NAME=emqx
      - EMQX_HOST=127.0.0.1
      - EMQX_DASHBOARD__DEFAULT_USERNAME=admin
      - EMQX_DASHBOARD__DEFAULT_PASSWORD=admin123
      - EMQX_AUTH__ALLOW_ANONYMOUS=true
      - EMQX_LOADED_PLUGINS="emqx_recon,emqx_retainer,emqx_management,emqx_dashboard"
    volumes:
      - emqx-data:/opt/emqx/data
      - emqx-log:/opt/emqx/log
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "emqx ctl status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - enocean-network

  # InfluxDB v2
  influxdb:
    image: influxdb:2.7
    container_name: enocean-influxdb
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=enocean123
      - DOCKER_INFLUXDB_INIT_ORG=enocean
      - DOCKER_INFLUXDB_INIT_BUCKET=sensors
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=admin_token_secret
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8086/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - enocean-network

  # Telegraf
  telegraf:
    image: telegraf:1.28
    container_name: enocean-telegraf
    depends_on:
      influxdb:
        condition: service_healthy
      emqx:
        condition: service_healthy
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    environment:
      - INFLUX_TOKEN=admin_token_secret
      - INFLUX_ORG=enocean
      - INFLUX_BUCKET=sensors
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "telegraf --test --config /etc/telegraf/telegraf.conf || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 30s
    networks:
      - enocean-network

  # Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: enocean-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - enocean-network

  # EnOcean Gateway (your Python script)
  # enocean-gateway:
  #   build:
  #     context: ./enocean-gateway
  #     dockerfile: Dockerfile.enocean
  #   container_name: enocean-gateway
  #   depends_on:
  #     emqx:
  #       condition: service_healthy
  #   environment:
  #     - ENOCEAN_PORT=${ENOCEAN_DEVICE:-/dev/ttyUSB0}
  #     - ENOCEAN_BAUD=57600
  #     - MQTT_BROKER=emqx
  #     - MQTT_PORT=1883
  #     - MQTT_TOPIC=enocean/sensors
  #     - DEBUG=true
  #   devices:
  #     - "${ENOCEAN_DEVICE:-/dev/ttyUSB0}:${ENOCEAN_DEVICE:-/dev/ttyUSB0}"
  #   volumes:
  #     - ./logs:/app/logs
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD-SHELL", "python -c \"import socket; s=socket.socket(); s.settimeout(1); s.connect(('emqx', 1883)); s.close()\" || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 20s
  #   networks:
  #     - enocean-network

volumes:
  influxdb-data:
  influxdb-config:
  grafana-data:
  emqx-data:
  emqx-log:

networks:
  enocean-network:
    driver: bridge